# This file is a template, and might need editing before it works on your project.

image: ygqygq2/k8s-alpine:latest

variables:
  # TRACE: "true"
  # AUTO_DEVOPS_DOMAIN is the application deployment domain and should be set as a variable at the group or project level.
  AUTO_DEVOPS_DOMAIN: "datcn.com"
  KUBERNETES_VERSION: "1.13.4"
  DEV_NAMESPACE: "dev"  # 各环境namespace
  UAT_NAMESPACE: "uat"
  PROD_NAMESPACE: "prod"
  HELM_VERSION: "2.13.0"
  HELM_REPO: "https://ygqygq2.github.io/charts"
  HELM_REPO_NAME: "utcook"
  HELM_HOST: "tiller-deploy.kube-system:44134"
  
  CHART_NAME: "utcook"  # chart模板名
  CHART_VERSION: "2.0.0"  # chart模板版本
  CONTAINER_REPO: "docker.io"  # 上传docker仓库
  CONTAINER_PROJECT: "ygqygq2"  # docker仓库项目
  DOCKER_HOST: "http://192.168.105.71:2375"
  DOCKER_USER: "docker"
  DOCKER_PASSWD: "Dev12345"
  DOCKER_DRIVER: "overlay2"
  SONAR_URL: "https://sonar.utcook.com"
  SONAR_TOKEN: "7be72717a14d30f0d243e4b80803d81b959113a4"
  MAVEN_HOST: "https://maven.aliyun.com/repository/central"
  UAT_ENABLED: "true"  # 添加注释,不部署uat环境
  STAGING_ENABLED: "true"
  REVIEW_DISABLED: "true"
  # ZAPROXY_DISABLED: "true"  # 添加注释，进行zaproxy
  PRODUCTION_ENABLED: "true"

  # manual, for manual deployment jobs.
  # timed, for automatic rollout deployments with a 5 minute delay each one.
  INCREMENTAL_ROLLOUT_MODE: "manual"  # 增量更新方式，manual或timed
  INCREMENTAL_ROLLOUT_ENABLED: "true"  # 添加注释,无增量更新

  # POD个数
  REPLICAS: "1"  # 默认为1
  UAT_REPLICAS: "1"
  PRODUCTION_REPLICAS: "1"

  # ci根目录，即此目录以下的项目为maven测试项目
  CI_ROOT_DIR: "/"
  # 要进行ci的项目目录名，空格隔开，不定义，默认为所有目录
  # CI_ROOT_DIR: "/"  时，CI_PROJECTS内目录可使用绝对路径
  # CI_PROJECTS: "/a/mytest /b/mytest2"
  CI_PROJECTS: "mytest mytest2"

stages:
  - build  # 打包，上传docker image
  - test  # 测试docker image
  - review  # 审核
  - zaproxy  # 漏洞扫描
  - staging  # dev环境
  - uat  # UAT环境
  - production  # 生产环境
  - incremental rollout 10%
  - incremental rollout 25%
  - incremental rollout 50%
  - incremental rollout 100%
  - cleanup

build:
  stage: build
  coverage: '/Total.*?([0-9]{1,3})%/'
  image: ygqygq2/maven:latest
  script:
    - setup_docker
    - build
  only:  # 执行条件
    # - tags  # 打了tag时才符合
    - branches

test:
  stage: test
  variables: 
    DOCKER_HOST: 'tcp://localhost:2375'
  image: ygqygq2/docker:stable-git
  services:
    - ygqygq2/docker:stable-dind  
  script:
    - test_image
  only:
    - branches
  except:
    variables:
      - $TEST_DISABLED

zaproxy:
  stage: zaproxy
  allow_failure: true
  image: owasp/zap2docker-weekly:latest  
  script:
    - zaproxy
  artifacts:
    paths: [report.html]
  only:
    refs:
      - branches
    kubernetes: active
  except:
    refs:
      - master
      - develop
    variables:
      - $ZAPROXY_DISABLED    

review:
  stage: review
  script:
    - check_kube_domain
    - install_dependencies
    - download_chart
    - ensure_namespace $DEV_NAMESPACE
    - initialize_tiller
    - create_secret $DEV_NAMESPACE
    - deploy $DEV_NAMESPACE review
    - persist_environment_url
  environment:
    name: review/$CI_COMMIT_REF_NAME
    url: http://gitlab-multi-maven-ci-demo.datcn.com
    on_stop: stop_review
  artifacts:
    paths: [environment_url.txt]
  only:
    refs:
      - branches
    kubernetes: active
  except:
    refs: # 除了以下分支
      - master
      - develop
    variables:
      - $REVIEW_DISABLED

stop_review:
  stage: cleanup
  variables:
    GIT_STRATEGY: none
  script:
    - install_dependencies
    - initialize_tiller
    - delete $DEV_NAMESPACE review
  environment:
    name: review/$CI_COMMIT_REF_NAME
    action: stop
  when: manual
  allow_failure: true
  only:
    refs:
      - branches
    kubernetes: active
  except:
    refs:  # 除了以下分支
      - master
      - develop
    variables:
      - $REVIEW_DISABLED

# Staging deploys are disabled by default since
# continuous deployment to production is enabled by default
# If you prefer to automatically deploy to staging and
# only manually promote to production, enable this job by setting
# STAGING_ENABLED.

staging:
  stage: staging
  script:
    - check_kube_domain
    - install_dependencies
    - download_chart
    - ensure_namespace $DEV_NAMESPACE
    - initialize_tiller
    - create_secret $DEV_NAMESPACE
    - deploy $DEV_NAMESPACE
  environment:
    name: staging
    url: http://gitlab-multi-maven-ci-demo-dev.datcn.com
  only:
    refs:
      - master  # 此分支才会自动部署
      - schedules
    kubernetes: active
    variables:
      - $STAGING_ENABLED

# Canaries are also disabled by default, but if you want them,
# and know what the downsides are, you can enable this by setting
# CANARY_ENABLED.

uat:
  stage: uat
  script:
    - check_kube_domain
    - install_dependencies
    - download_chart
    - ensure_namespace $UAT_NAMESPACE
    - initialize_tiller
    - create_secret $UAT_NAMESPACE
    - deploy $UAT_NAMESPACE
  environment:
    name: uat
    url: http://gitlab-multi-maven-ci-demo-uat.datcn.com
  when: manual
  only:
    refs:
      - master
    kubernetes: active
    variables:
      - $UAT_ENABLED

.production: &production_template
  stage: production
  script:
    - check_kube_domain
    - install_dependencies
    - download_chart
    - ensure_namespace $PROD_NAMESPACE
    - initialize_tiller
    - create_secret $PROD_NAMESPACE
    - deploy $PROD_NAMESPACE
    - delete $PROD_NAMESPACE rollout
    - persist_environment_url
  environment:
    name: production
    url: http://gitlab-multi-maven-ci-demo.datcn.com
  artifacts:
    paths: [environment_url.txt]

production:
  <<: *production_template
  only:
    refs:
      - master
    kubernetes: active
  except:
    variables:
      - $STAGING_ENABLED
      - $CANARY_ENABLED
      - $INCREMENTAL_ROLLOUT_ENABLED
      - $INCREMENTAL_ROLLOUT_MODE

production_manual:
  <<: *production_template
  when: manual
  allow_failure: false
  only:
    refs:
      - master
    kubernetes: active
    variables:
      - $STAGING_ENABLED
      - $CANARY_ENABLED
  except:
    variables:
      - $INCREMENTAL_ROLLOUT_ENABLED
      - $INCREMENTAL_ROLLOUT_MODE

# This job implements incremental rollout on for every push to `master`.

.rollout: &rollout_template
  script:
    - check_kube_domain
    - install_dependencies
    - download_chart
    - ensure_namespace $PROD_NAMESPACE
    - initialize_tiller
    - create_secret $PROD_NAMESPACE
    - deploy $PROD_NAMESPACE rollout $ROLLOUT_PERCENTAGE
    - scale $PROD_NAMESPACE stable $((100-ROLLOUT_PERCENTAGE))
    - persist_environment_url
  environment:
    name: production
    url: http://gitlab-maven-ci-demo.datcn.com
  artifacts:
    paths: [environment_url.txt]

.manual_rollout_template: &manual_rollout_template
  <<: *rollout_template
  stage: production
  when: manual
  # This selectors are backward compatible mode with $INCREMENTAL_ROLLOUT_ENABLED (before 11.4)
  only:
    refs:
      - master
    kubernetes: active
    variables:
      - $INCREMENTAL_ROLLOUT_MODE == "manual"
      - $INCREMENTAL_ROLLOUT_ENABLED
  except:
    variables:
      - $INCREMENTAL_ROLLOUT_MODE == "timed"

.timed_rollout_template: &timed_rollout_template
  <<: *rollout_template
  when: delayed
  start_in: 5 minutes
  only:
    refs:
      - master
    kubernetes: active
    variables:
      - $INCREMENTAL_ROLLOUT_MODE == "timed"

timed rollout 10%:
  <<: *timed_rollout_template
  stage: incremental rollout 10%
  variables:
    ROLLOUT_PERCENTAGE: 10

timed rollout 25%:
  <<: *timed_rollout_template
  stage: incremental rollout 25%
  variables:
    ROLLOUT_PERCENTAGE: 25

timed rollout 50%:
  <<: *timed_rollout_template
  stage: incremental rollout 50%
  variables:
    ROLLOUT_PERCENTAGE: 50

timed rollout 100%:
  <<: *timed_rollout_template
  <<: *production_template
  stage: incremental rollout 100%
  variables:
    ROLLOUT_PERCENTAGE: 100

rollout 10%:
  <<: *manual_rollout_template
  variables:
    ROLLOUT_PERCENTAGE: 10

rollout 25%:
  <<: *manual_rollout_template
  variables:
    ROLLOUT_PERCENTAGE: 25

rollout 50%:
  <<: *manual_rollout_template
  variables:
    ROLLOUT_PERCENTAGE: 50

rollout 100%:
  <<: *manual_rollout_template
  <<: *production_template
  allow_failure: false

# ---------------------------------------------------------------------------

.auto_devops: &auto_devops |
  # Auto DevOps variables and functions
  [[ "$TRACE" ]] && set -x
  export INIT_DIR=$(pwd)
  # Extract "MAJOR.MINOR" from CI_SERVER_VERSION and generate "MAJOR-MINOR-stable" for Security Products
  export SP_VERSION=$(echo "$CI_SERVER_VERSION" | sed 's/^\([0-9]*\)\.\([0-9]*\).*/\1-\2-stable/')
  export CI_COMMIT_SHORT_SHA=${CI_COMMIT_SHA:0:8}  # 11.7才有，所以这里使用自定义
  # if [ "$CI_COMMIT_REF_NAME" == "master" ]; then
  #   export CONTAINER_TAG="stable"
  # fi
  if [ -z "$CI_ROOT_DIR" ]; then
    export CI_ROOT_DIR="/"
  fi
  if [ -z "$CI_PROJECTS" ]; then
    export CI_PROJECTS=($(ls ${CI_PROJECT_DIR}${CI_ROOT_DIR}))
  else
    export CI_PROJECTS=($CI_PROJECTS)  # 转成换数组
  fi

  function registry_login() {
    # 使用Harbor
    if [[ -n "$DOCKER_USER" ]]; then
      echo "Logging to Harbor..."
      docker login -u "$DOCKER_USER" -p "$DOCKER_PASSWD" "$CONTAINER_REPO"
      echo ""
    fi
  }

  function get_replicas() {
    local track="${1:-stable}"
    local percentage="${2:-100}"

    env_track=$( echo $track | tr  '[:lower:]'  '[:upper:]' )
    env_slug=$( echo ${CI_ENVIRONMENT_SLUG//-/_} | tr  '[:lower:]'  '[:upper:]' )

    if [[ "$track" == "stable" ]] || [[ "$track" == "rollout" ]]; then
      # for stable track get number of replicas from `PRODUCTION_REPLICAS`
      eval new_replicas=\$${env_slug}_REPLICAS
      if [[ -z "$new_replicas" ]]; then
        new_replicas=$REPLICAS
      fi
    else
      # for all tracks get number of replicas from `CANARY_PRODUCTION_REPLICAS`
      eval new_replicas=\$${env_track}_${env_slug}_REPLICAS
      if [[ -z "$new_replicas" ]]; then
        eval new_replicas=\${env_track}_REPLICAS
      fi
    fi

    replicas="${new_replicas:-1}"
    replicas="$(($replicas * $percentage / 100))"

    # always return at least one replicas
    if [[ $replicas -gt 0 ]]; then
      echo "$replicas"
    else
      echo 1
    fi
  }

  function deploy() {
    local KUBE_NAMESPACE="${1-${DEV_NAMESPACE}}"
    local track="${2-stable}"
    local percentage="${3:-100}"
    local name
    local replicas="1"
      
    for ci_project in ${CI_PROJECTS[@]}; do
      cd ${CI_PROJECT_DIR}${CI_ROOT_DIR}/${ci_project}
      tmp_name=$(echo $ci_project|sed -e 's@^/@@' -e 's@/@-@g')
      name="${KUBE_NAMESPACE}-${tmp_name}"
      local xmlns=$(grep 'xmlns=' pom.xml|sed -r 's@.*xmlns=(.*)@\1@'|awk '{print $1}'|sed 's@"@@g')
      image_name=$(xmlstarlet sel -N d=$xmlns -T -t -m "//d:project" -v d:artifactId -n pom.xml)
      image_tag=$(xmlstarlet sel -N d=$xmlns -T -t -m "//d:project" -v d:version -n pom.xml)-$CI_COMMIT_SHORT_SHA      
      image_url=$CONTAINER_REPO/$CONTAINER_PROJECT/${image_name}

      # if track is different than stable,
      # re-use all attached resources
      if [[ "$track" != "stable" ]]; then
        name="${KUBE_NAMESPACE}-${name}-${track}"
      fi

      # helm名只允许小写和-
      name=$(echo ${name//_/-} | tr '[:upper:]' '[:lower:]')

      replicas=$(get_replicas "$track" "$percentage")

      if [[ "$CI_PROJECT_VISIBILITY" != "public" ]]; then
        secret_name='gitlab-registry'
      else
        secret_name=''
      fi

      # 判断是否有自定义values.yaml
      if [ -f $CI_PROJECT_DIR/ci/${KUBE_NAMESPACE}/${tmp_name}-values.yaml ]; then
        values_option="-f $CI_PROJECT_DIR/ci/${KUBE_NAMESPACE}/${tmp_name}-values.yaml"
      else
        values_option=""
      fi

      cd ${CI_PROJECT_DIR}
      if [[ -z "$(helm ls -q "^$name$")" ]]; then
        helm upgrade --install \
          --wait \
          --namespace="$KUBE_NAMESPACE" \
          --set image.repository="${image_url}" \
          --set image.tag="${image_tag}" \
          --set replicaCount="$replicas" \
          --force \
          $values_option \
          "$name" \
          chart/
      else
        helm upgrade --reuse-values --install \
          --wait \
          --namespace="$KUBE_NAMESPACE" \
          --set image.repository="${image_url}" \
          --set image.tag="${image_tag}" \
          --set replicaCount="$replicas" \
          --force \
          $values_option \
          "$name" \
          chart/
      fi

      kubectl rollout status -n "$KUBE_NAMESPACE" -w "deployment/${name}-${CHART_NAME}" \
        || kubectl rollout status -n "$KUBE_NAMESPACE" -w "statefulset/${name}-${CHART_NAME}"
    done
  }

  function scale() {
    local KUBE_NAMESPACE="${1-${DEV_NAMESPACE}}"
    local track="${2-stable}"
    local percentage="${3:-100}"
    local name

    for ci_project in ${CI_PROJECTS[@]}; do
      tmp_name=$(echo $ci_project|sed -e 's@^/@@' -e 's@/@-@g')
      name="${KUBE_NAMESPACE}-${tmp_name}"

      if [[ "$track" != "stable" ]]; then
        name="${KUBE_NAMESPACE}-${name}-${track}"
      fi

      # helm名只允许小写和-
      name=$(echo ${name//_/-} | tr '[:upper:]' '[:lower:]')    

      replicas=$(get_replicas "$track" "$percentage")

      if [[ -n "$(helm ls -q "^$name$")" ]]; then
        helm upgrade --reuse-values \
          --wait \
          --set replicaCount="$replicas" \
          --namespace="$KUBE_NAMESPACE" \
          "$name" \
          chart/
      fi
    done
  }

  function install_dependencies() {
    # 基础镜像已经安装，此处只打印版本
    helm version
    tiller -version
    kubectl version
  }

  function setup_docker() {
    if ! docker info &>/dev/null; then
      if [ -z "$DOCKER_HOST" -a "$KUBERNETES_PORT" ]; then
        export DOCKER_HOST='tcp://localhost:2375'
      fi
    fi
  }

  function download_chart() {
    if [[ ! -d chart ]]; then
      auto_chart=${AUTO_DEVOPS_CHART:-${HELM_REPO_NAME}/${CHART_NAME}}
      auto_chart_name=$(basename $auto_chart)
      auto_chart_name=${auto_chart_name%.tgz}
      auto_chart_name=${auto_chart_name%.tar.gz}
    else
      auto_chart="chart"
      auto_chart_name="chart"
    fi

    # 添加内网chart
    helm init --client-only --stable-repo-url ${HELM_REPO}
    helm repo add ${HELM_REPO_NAME} ${HELM_REPO}
    if [[ ! -d "$auto_chart" ]]; then
      helm fetch ${auto_chart} --untar --version=$CHART_VERSION
    fi
    if [ "$auto_chart_name" != "chart" ]; then
      mv ${auto_chart_name} chart
    fi

    helm dependency update chart/
    helm dependency build chart/
  }

  function ensure_namespace() {
    local KUBE_NAMESPACE="$1"
    kubectl describe namespace "$KUBE_NAMESPACE" || kubectl create namespace "$KUBE_NAMESPACE"
  }

  function check_kube_domain() {
    if [ -z ${AUTO_DEVOPS_DOMAIN+x} ]; then
      echo "In order to deploy or use Review Apps, AUTO_DEVOPS_DOMAIN variable must be set"
      echo "You can do it in Auto DevOps project settings or defining a variable at group or project level"
      echo "You can also manually add it in .gitlab-ci.yml"
      false
    else
      true
    fi
  }

  function build() {
    # registry_login
    # 设置maven setting.xml
    cat > /usr/share/maven/conf/settings.xml <<EOF
  <?xml version="1.0" encoding="UTF-8"?>    
  <settings xmlns="http://maven.apache.org/SETTINGS/1.0.0"
      xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
      xsi:schemaLocation="http://maven.apache.org/SETTINGS/1.0.0
      https://maven.apache.org/xsd/settings-1.0.0.xsd">
    <localRepository>/usr/share/maven/ref/repository</localRepository>
    <servers>
      <server>
        <id>dockerId</id>
        <username>${DOCKER_USER}</username>
        <password>${DOCKER_PASSWD}</password>
        <configuration>
          <email></email>
        </configuration>
      </server>
    </servers>
  </settings>
  EOF

    # 根据pom.xml判断是否进行mvn操作
    for ci_project in ${CI_PROJECTS[@]}; do
      cd ${CI_PROJECT_DIR}${CI_ROOT_DIR}/${ci_project}
      [ ! -f "pom.xml" ] \
        && echo "【${CI_PROJECT_DIR}${CI_ROOT_DIR}/${ci_project}】 not a maven project. Skip." \
        && continue

      # 获取xml namespace
      local xmlns=$(grep 'xmlns=' pom.xml|sed -r 's@.*xmlns=(.*)@\1@'|awk '{print $1}'|sed 's@"@@g')
      # 更新docker仓库
      \cp pom.xml .tmp-pom.xml
      xmlstarlet ed -N d=$xmlns -u "//d:project/d:properties/d:registryUrl" \
        -v $CONTAINER_REPO .tmp-pom.xml > tmp-pom.xml
      mv tmp-pom.xml .tmp-pom.xml
      # 更新docker仓库项目
      xmlstarlet ed -N d=$xmlns -u "//d:project/d:properties/d:registryProject" \
        -v $CONTAINER_PROJECT .tmp-pom.xml > tmp-pom.xml
      mv tmp-pom.xml .tmp-pom.xml
      # 更新docker tag引入环境变量
      xmlstarlet ed -N d=$xmlns -u "//d:project/d:properties/d:dockerImageTag" \
        -v '${project.version}-${env.CI_COMMIT_SHORT_SHA}' .tmp-pom.xml > tmp-pom.xml
      mv tmp-pom.xml ci-pom.xml

      # echo "mvn test -f ci-pom.xml"
      # mvn test -f ci-pom.xml
      echo "mvn sonar"
      mvn sonar:sonar -Dsonar.java.binaries=target/sonar -Dsonar.host.url=${SONAR_URL} -Dsonar.login=${SONAR_TOKEN}
      echo "mvn install -DskipTests -f ci-pom.xml"
      mvn install -f ci-pom.xml -DskipTests
    done
    cd $INIT_DIR
  }

  function test_image() {
    # 容器能运行60秒，即表示image正常（未测试程序逻辑）
    return 0
    registry_login
    for ci_project in ${CI_PROJECTS[@]}; do
      cd ${CI_PROJECT_DIR}${CI_ROOT_DIR}/${ci_project}
      local xmlns=$(grep 'xmlns=' pom.xml|sed -r 's@.*xmlns=(.*)@\1@'|awk '{print $1}'|sed 's@"@@g')
      local image_name=$(xmlstarlet sel -N d=$xmlns -T -t -m "//d:project" -v d:artifactId -n pom.xml)
      local image_tag=$(xmlstarlet sel -N d=$xmlns -T -t -m "//d:project" -v d:version -n pom.xml)-$CI_COMMIT_SHORT_SHA
      image_all_url=$CONTAINER_REPO/$CONTAINER_PROJECT/${image_name}:${image_tag}
      docker pull $image_all_url \
        || { echo "Doesn't get image [$image_all_url], skip" \
        && continue ; }
      echo "Start comtainer 【$ci_project】to run 60s."
      docker_name=$(head /dev/urandom|tr -dc a-z|head -c 8)
      docker run --name $docker_name -d $image_all_url
      sleep 60
      docker exec -i $docker_name /bin/sh -c "true"
      docker rm -f $docker_name
    done
  }

  function initialize_tiller() {
    echo "Checking Tiller..."
    if [ -z "${HELM_HOST}" ]; then
      export HELM_HOST=":44134"
      tiller -listen ${HELM_HOST} -alsologtostderr > /dev/null 2>&1 &
      echo "Tiller is listening on ${HELM_HOST}"
    fi

    if ! helm version --debug; then
      echo "Failed to init Tiller."
      return 1
    fi
    echo ""
  }

  function create_secret() {
    local KUBE_NAMESPACE="$1"
    echo "Create secret..."
    if [[ "$CI_PROJECT_VISIBILITY" == "public" ]]; then
      return
    fi

    kubectl create secret -n "$KUBE_NAMESPACE" \
      docker-registry gitlab-registry \
      --docker-server="$CONTAINER_REPO" \
      --docker-username="${DOCKER_USER}" \
      --docker-password="${DOCKER_PASSWD}" \
      --docker-email="$GITLAB_USER_EMAIL" \
      -o yaml --dry-run | kubectl replace -n "$KUBE_NAMESPACE" --force -f -
  }

  function zaproxy() {
    export CI_ENVIRONMENT_URL=$(cat environment_url.txt)
    mkdir -p /zap/wrk/
    zap-baseline.py -t "$CI_ENVIRONMENT_URL" -g gen.conf -r report.html || true
    cp /zap/wrk/report.html .
  }


  function persist_environment_url() {
      echo $CI_ENVIRONMENT_URL > environment_url.txt
  }

  function delete() {
    return 0  # 暂时不支持自动删除（较危险）
    local KUBE_NAMESPACE="${1-${DEV_NAMESPACE}}"
    local track="${2-stable}"
    local name="${KUBE_NAMESPACE}-${CI_PROJECT_NAME}"

    if [[ "$track" != "stable" ]]; then
      name="${KUBE_NAMESPACE}-${CI_PROJECT_NAME}-${track}"
    fi
    
    # helm名只允许小写和-
    name=$(echo ${name//_/-} | tr '[:upper:]' '[:lower:]')    

    if [[ -n "$(helm ls -q "^$name$")" ]]; then
      helm delete --purge "$name"
    fi
  }

before_script:
  - *auto_devops
